# SPDX-FileCopyrightText: 2020 Serokell <https://serokell.io/>
#
# SPDX-License-Identifier: MPL-2.0

{ config, lib, pkgs, ... }:
let
  inherit (lib) mkIf mkOption mkEnableOption;
  inherit (builtins) toString;
  cfg = config.services.mtproxy;
in
{
  options.services.mtproxy = with lib; {
    enable = mkEnableOption "MTProto Proxy";

    configFile = mkOption {
      type = types.nullOr types.str;
      default = "/tmp/proxy-multi.conf";
      example = "/tmp/proxy-multi.conf";
      description = ''
        Where to write the config file we download from Telegram.
      '';
    };

    secretFile = mkOption {
      type = types.nullOr types.str;
      default = "/tmp/mtproto-secret";
      example = "/tmp/mtproto-secret";
      description = ''
        Where to write the network secret we download from Telegram.
      '';
    };

    package = mkOption {
      type = types.package;
      defaultText = "pkgs.mtproxy";
      default = pkgs.mtproxy;
      description = ''
        Package to use for the service.
      '';
    };

    localPort = mkOption {
      type = types.int;
      default = 8888;
      example = 8888;
      description = ''
        Local port to get usage stats from. Only works via loopback.

        wget localhost:8888/stats
      '';
    };

    httpPort = mkOption {
      type = types.int;
      default = 8443;
      example = 8443;
      description = ''
        HTTP port for clients to connect to.
      '';
    };

    workers = mkOption {
      type = types.int;
      default = 8;
      description = ''
        Number of workers to spawn.
      '';
    };

    tag = mkOption {
      type = types.str;
      default = null;
      description = ''
        Tag generated by @MTProxybot

        Talk to bot on Telegram to get this tag.
      '';
    };

    secret = mkOption {
      type = types.str;
      default = null;
      description = ''
        Shared secret for proxy usage. Not sensitive.

        Generate with head -c 16 /dev/urandom | xxd -ps
      '';
    };
  };

  config = mkIf cfg.enable {
    systemd.services.mtproxy = {
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" ];
      description = "MTProto proxy server for Telegram.";
      path = with pkgs; [ curl ];

      preStart = ''
        # Get network secret
        rm -f ${cfg.secretFile}
        curl -s https://core.telegram.org/getProxySecret -o ${cfg.secretFile}

        # Update upstream config
        rm -f ${cfg.configFile}
        curl -s https://core.telegram.org/getProxyConfig -o ${cfg.configFile}
      '';

      script = ''
        ${cfg.package}/bin/mtproto-proxy \
          -p ${toString cfg.localPort} \
          -H ${toString cfg.httpPort} \
          --aes-pwd ${cfg.secretFile} \
          -M ${toString cfg.workers} \
          -S ${cfg.secret} \
          -P ${cfg.tag} \
          ${cfg.configFile}
      '';

      serviceConfig = {
        DynamicUser = true;
      };
    };

  };
}
